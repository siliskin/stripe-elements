export function resetTestState(): void;
export function mockCanMakePayment(): void;
export function restoreCanMakePayment(): void;
export function mockShadyCSS(): void;
export function restoreShadyCSS(): void;
export function spyGetComputedStyleValue(): void;
export function restoreGetComputedStyleValue(): void;
export function mockShadyDOM(): void;
export function restoreShadyDOM(): void;
export function mockStripe(): void;
export function restoreStripe(): void;
export function spyCardClear(): void;
export function spyStripeElementBlur(): void;
export function restoreStripeElementBlur(): void;
export function spyStripeElementFocus(): void;
export function restoreStripeElementFocus(): void;
export function restoreCardClear(): void;
export function spyConsoleWarn(): void;
export function restoreConsoleWarn(): void;
export function stubFetch(): void;
export function restoreFetch(): void;
export function setupWithTemplate(template: any): () => Promise<void>;
export function setupNoProps(): Promise<void>;
export function updateComplete(): Promise<unknown>;
export function setupWithPublishableKey(publishableKey: any): () => Promise<void>;
export function removeStripeMount(): Promise<void>;
export function appendAllBlueStyleTag(): void;
export function removeAllBlueStyleTag(): void;
export function appendHeightStyleTag(): void;
export function removeHeightStyleTag(): void;
export function listenFor(eventType: any): () => Promise<void>;
export function awaitEvent(eventType: any): () => Promise<void>;
export function sleep(ms: any): () => Promise<void>;
export function assertCalled(stub: any): () => void;
export function assertFired(eventType: any): () => Promise<void>;
export function assertEventDetail(eventType: any, expected: any): () => Promise<void>;
export function assertProps(props: any, { deep }?: {
    deep: any;
}): () => Promise<void>;
export function assertErrorMessage(message: any): () => void;
export function assertPropsOk(props: any, { not }?: {
    not: any;
}): () => Promise<void>;
export function testDefaultPropEntry([name, value]: [any, any]): Mocha.Test;
export function testReadOnlyProp(name: any): void;
export function testWritableNotifyingProp(name: any): void;
export function testReadonlyNotifyingProp(name: any): void;
export function assertElementErrorMessage(message: any): () => void;
export function blur(): Promise<void>;
export function focus(): Promise<void>;
export function blurStripeElement(): Promise<void>;
export function focusStripeElement(): Promise<void>;
export function submit(): Promise<void>;
export function reset(): Promise<void>;
export function createPaymentMethod(): Promise<void>;
export function createSource(): Promise<void>;
export function createToken(): Promise<void>;
export function validate(): Promise<void>;
export function setProps(props: any): () => Promise<void>;
export function synthCardEvent(...args: any[]): () => void;
export function synthPaymentRequestEvent(...args: any[]): () => void;
export function synthStripeFormValues(inputs: any): () => Promise<void>;
export const NO_STRIPE_JS_ERROR: "requires Stripe.js to be loaded first.";
export const NO_STRIPE_CONFIRM_CARD_ERROR: "Stripe must be initialized before calling confirmCardPayment.";
export const NO_STRIPE_CREATE_PAYMENT_METHOD_ERROR: "Stripe must be initialized before calling createPaymentMethod.";
export const NO_STRIPE_CREATE_SOURCE_ERROR: "Stripe must be initialized before calling createSource.";
export const NO_STRIPE_CREATE_TOKEN_ERROR: "Stripe must be initialized before calling createToken.";
export const EMPTY_CC_ERROR: "Your card number is empty.";
export const BASE_DEFAULT_PROPS: Readonly<{
    billingDetails: {};
    paymentMethodData: {};
    sourceData: {};
    tokenData: {};
    clientSecret: any;
    generate: string;
    action: any;
    element: any;
    elements: any;
    error: any;
    hasError: boolean;
    publishableKey: any;
    paymentMethod: any;
    showError: boolean;
    source: any;
    stripe: any;
    token: any;
}>;
export const BASE_READ_ONLY_PROPS: readonly string[];
export const BASE_NOTIFYING_PROPS: readonly string[];
export const ALLOWED_STYLES: readonly string[];
export const STYLE_PREFIXES: readonly string[];
export const ALL_BLUE_STYLES: any;
export let fetchStub: any;
/**
 * [events description]
 * @type {import('../src/StripeElements.js').StripeElements|import('../src/StripePaymentRequest.js').StripePaymentRequest}
 */
export let element: import('../src/StripeElements.js').StripeElements | import('../src/StripePaymentRequest.js').StripePaymentRequest;
export let initialStripeMountId: any;
export let initialStripe: any;
export const events: Map<any, any>;
export function noop(): void;
export function assignedNodes(el: any): any;
export function mountLightDOM({ stripeMountId, tagName }: {
    stripeMountId: any;
    tagName?: any;
}): string;
export function expectedLightDOM({ stripeMountId, tagName }: {
    stripeMountId: any;
    tagName: any;
}): string;
